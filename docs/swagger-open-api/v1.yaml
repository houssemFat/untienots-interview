openapi: "3.0.2"
info:
  version: 0.0.1
  title: UntieNots openapi spec
  description: For api all calls api must contains the api key request header, except accounts login calls.
  termsOfService: '...'
  contact:
    name: UntieNots team
    email: dev@untienots.com
    url: 'https://www.untienots.com'
servers:
  - url: https://api.server.test/v1/

paths:
  # account routes
  /accounts:
    post:
      tags:
        - Accounts
      requestBody:
        $ref: '#/components/requestBodies/CreateUserBody'
      responses:
        '200':
          description: Create an account
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/requestBodies/CreateUserBody'
        '400':
          $ref: '#/components/responses/BadRequest'

        default:
          $ref: '#/components/responses/GeneralError'
  /accounts/update-password:
    put:
      tags:
        - Accounts
      requestBody:
        $ref: '#/components/requestBodies/UpdateUserPasswordBody'
      responses:
        '200':
          $ref: '#/components/responses/OkResponse'

        '401':
          $ref: '#/components/responses/NotAuthorized'

        '400':
          $ref: '#/components/responses/BadRequest'

        default:
          $ref: '#/components/responses/GeneralError'
      security:
        - app_auth:
            - write:user-password

  /accounts/update-email:

    put:
      description : Note that after this operation, a validation mail should be sent and the user may logged out
      tags:
        - Accounts
      requestBody:
        $ref: '#/components/requestBodies/UpdateUserEmailBody'
      responses:
        '200':
          $ref: '#/components/responses/OkResponse'

        '401':
          $ref: '#/components/responses/NotAuthorized'

        '400':
          $ref: '#/components/responses/BadRequest'

        default:
          $ref: '#/components/responses/GeneralError'
      security:
        - app_auth:
            - write:user-email



  /movies:
    get:
      tags:
        - Movies
      description: |
        Returns movies. The backend will be enable to identify the role of current authenticated user. Regarding the role of user the backend will serve either the list of all movies or only ....
      operationId: getMovies
      parameters:
        - $ref: '#/components/parameters/search_query'
        - $ref: '#/components/parameters/per_page'
        - $ref: '#/components/parameters/sort_by'


      responses:
        '200':
          description: Movies list
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/MoviesList'
        '401':
          $ref: '#/components/responses/NotAuthorized'
        default:
          description: unexpected error
      security:
        - app_auth:
            - read:movies

  /movies/{movieId}:
    put:
      tags:
        - Movies
      description: |
        Update status and price of a movie
      operationId: UpdateMovie

      parameters:
        - name: movieId
          in: path
          required : true
          schema:
            type: string

      requestBody:
        $ref: '#/components/requestBodies/UpdateItemBody'

      responses:
        '200':
          description: Plan response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Movie'

        '401':
          $ref: '#/components/responses/NotAuthorized'

        '400':
          $ref: '#/components/responses/BadRequest'

        '404':
          $ref: '#/components/responses/NotFound'

        default:
          $ref: '#/components/responses/GeneralError'

      security:
        - app_auth:
            - write:movies
            - read:movies

components:

  schemas:

    # http responses

    GeneralError:
      type: object
      properties:
        code:
          type: integer
          format: int32
        message:
          type: string

    OkResponse:
      type: object
      properties:
        code:
          type: integer
          default: 200
        message:
          type: string
          default: 'OK'

    # movies schemas & specs

    Movie:
      required:
        - title
        - thumbnail
        - price
        - actors
        - info
      properties:
        title:
          type: string
        thumbnail:
          type: string
          format : url
        price :
          type : number
          format : number

        # contains all related info, review, producer, category
        info:
          type : object
        actors:
          type: array
          items:
            $ref: '#/components/schemas/Actor'

    UpdateMovieBody:
      required:
        - status
        - price
      properties:
        price:
          type: number
          format: number
        status:
          type: string
          enum: [true, false]

    MoviesList:
      allOf:
        - $ref: '#/components/schemas/Movie'
        - required:
            - id
            - name

    # actor schemas & specs
    Actor:
      required:
        - name
        - photo
      properties:
        name:
          type: string
        photo:
          type: string
    # user actions schemas & specs
    CreateUserBody:
      required:
        - email
        - username
        - password
        - passwordConfirm
      properties:
        email:
          type: string
          format: email
        username:
          type: string
          format: string
        password:
          type: string
          format: password
        passwordConfirm:
          type: string
          format: password

    # user password update

    UpdateUserEmailBody:
      required:
        - currentPassword
        - newEmail
      properties:
        currentPassword:
          type: string
          format: password
        newEmail:
          type: string
          format: password

    # user password update

    UpdateUserPasswordBody:
      required:
        - currentPassword
        - newPassword
        - newPasswordConfirm
      properties:
        currentPassword:
          type: string
          format: password
        newPassword:
          type: string
          format: password
        newPasswordConfirm:
          type: string
          format: password
  parameters:
    per_page:
      name: per_page
      in: query
      description: Max items to return in a request
      required: false
      schema:
        default: 10
        type: number
        format: int32

    sort_by:
      name: sort_by
      in: query
      description: Sort options
      required: false
      schema:
        type: string

    search_query:
      name: q
      in: query
      description: Order ['DESC', 'ASC']
      required: false
      schema:
        type: string
        enum: ['DESC', 'ASC']

  requestBodies:
    # movies requestbodies, post & put
    UpdateItemBody :
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/UpdateMovieBody'

    # user requestbodies, post & put

    CreateUserBody :
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/CreateUserBody'

    UpdateUserPasswordBody :
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/UpdateUserPasswordBody'

    UpdateUserEmailBody :
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/UpdateUserEmailBody'


  responses:
    NotFound:
      description: Entity not found.
    NotAuthorized:
      description: Not authorized.
    OkResponse:
      description : Ok response
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/OkResponse'
    BadRequest :
      description: Bad request.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/GeneralError'
    GeneralError:
      description: General Error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/GeneralError'

  securitySchemes:
    app_auth:
      type: oauth2
      flows:
        implicit:
          authorizationUrl: http://example.org/api/oauth/dialog
          scopes:
            write:movies: modify movies
            read:movies: read movies
            write:user-password : modify password
            write:user-email: modify user email
